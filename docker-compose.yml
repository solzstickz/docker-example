version: "3.9"
name: docker-compose-lamp
services:
  # frontend:
  #   build: ./frontend/
  #   container_name: fontend_nextjs
  #   image: node:latest
  #   restart: always
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend/:/var/www/html
  #   depends_on:
  #     - backend
  #   networks:
  #     - appnetwork
  
  author:
    container_name: author
    build: ./author/
    image: node:latest
    restart: always
    ports:
      - "3001:3001"
    volumes:
      - ./author:/author
    working_dir: /author
    depends_on:
      - backend
    environment:
      - TZ=Asia/Bangkok
    command: bash -c "npm install && npm run build && npm run start"
    networks:
      appnetwork:

  frontend:
    container_name: frontend
    build: ./frontend/
    image: node:latest
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/frontend
    working_dir: /frontend
    depends_on:
      - backend
    environment:
      - TZ=Asia/Bangkok
    # command: bash -c "npm install && npm run dev"
    command: bash -c "npm install && npm run build && npm run start"
    networks:
      appnetwork:

  nginx:
    container_name: nginx
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
    volumes:
      # - ./src/:/var/www/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    links:
      - frontend
    depends_on:
      - frontend
    networks:
      appnetwork:
    mem_limit: 512m
    cpus: 0.5


  backend:
    container_name: backend
    build: ./backend/
    image: node:latest
    restart: always
    ports:
      - "7777:7777"
    volumes:
      - ./backend:/app_backend
    working_dir: /app_backend
    environment:
      - NODE_ENV= development
      - TZ=Asia/Bangkok
    command: npm run start
    networks:
      appnetwork:
networks:
  appnetwork:
    driver: bridge

# mysql:
#   restart: always
#   image: mysql:5.7
#   platform: linux/amd64
#   container_name: mysql
#   ports:
#     - "3306:3306"
#   volumes:
#     - ./database:/docker-entrypoint-initdb.d/
#   # mem_limit: 512m

#   environment:
#     - MYSQL_DATABASE=app_db
#     - MYSQL_USER=skz
#     - MYSQL_PASSWORD=skzz
#     - MYSQL_ROOT_PASSWORD=skzz-pw
#   networks:
#     mysqlnetwork:

# redis-server:
#   restart: always
#   image: redis
#   container_name: redis-server
#   command: /bin/bash -c 'redis-server --appendonly yes'
#   sysctls:
#     - net.core.somaxconn=65535
#   ports:
#     - "3333:6379"
#   volumes:
#     - ./redis:/redis_data
#   # mem_limit: 96m
#   networks:
#     mysqlnetwork:

# mysql-admin:
#   restart: always
#   image: phpmyadmin/phpmyadmin
#   platform: linux/amd64
#   container_name: mysql-admin
#   ports:
#     - "8081:80"
#   mem_limit: 512m
#   depends_on:
#     - mysql
#   links:
#     - mysql
#   environment:
#     - PMA_HOST=mysql
#     - PMA_ROOT_PASSWORD=skzz-pw
#     - PMA_ARBITRARY=1
#     - PMA_DATABASE=app_db
#   networks:
#     mysqlnetwork:
#connect database server = mysql; user:skz,pass:skzz
# networks:
#   mysqlnetwork:
#     driver: bridge
#docker exec -it mysql bash
#mysql -u root -p
